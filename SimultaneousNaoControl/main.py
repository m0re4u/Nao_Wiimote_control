import argparse
import sys
import time
import math
import cwiid
from threading import Thread

from naomanager import NaoManager, DEFAULT_PORT
from naoqi import ALProxy

def connectWiimote(wm):
    i = 0
    print 'Press 1+2 on your Wiimote now...'
    while not wm:
        try:
            wm = cwiid.Wiimote()
            print("Connected")
        except RuntimeError:
            if(i>5):
                print("Cannot connect to Wiimote")
                quit()
            print("Failed attempt",i)
            i += 1

    wm.rpt_mode = cwiid.RPT_BTN | cwiid.RPT_ACC
    wm.led = 1
    return wm

# Main program to perform the measurements
def main(args):
    # Create list of nao objects
    naos = NaoManager()
    for nao in args.nao:
        try:
            ip, port = nao.split(':')
            #naos.addnao(ip, int(port))
        except ValueError:
            ip = nao
            port = DEFAULT_PORT
            naos.addnao(ip, int(port))
    print("Connected",len(naos),"Naos")
    wm = None
    wm = connectWiimote(wm)
    x  = 0.0
    y  = 0.0
    theta  = 0.0
    frequency  = 0.3
    CommandFreq = 0.5
    print("Connected Wiimote")
    starttime = time.time()

    while True:
        buttons = wm.state['buttons']
        if (buttons & cwiid.BTN_HOME):
            print("Closing Connection")
            for nao in naos:
                nao.motion.rest()
                wm.rumble = 1
                time.sleep(1)
                wm.rumble = 0
                nao.motion.killAll()
                nao.stop()
                wm = None
                exit()
        elif (buttons & cwiid.BTN_UP):
            print("Move forward")
            for nao in naos:
                x = 0.5
                nao.motion.setWalkTargetVelocity(x, y, theta, frequency)
                time.sleep(CommandFreq)
        elif (buttons & cwiid.BTN_DOWN):
            print("Move backward")
            for nao in naos:
                x  = -0.5
                nao.motion.setWalkTargetVelocity(x, y, theta, frequency)
                time.sleep(CommandFreq)
        elif (buttons & cwiid.BTN_LEFT):
            print("Turning left")
            for nao in naos:
                theta = 0.5
                nao.motion.setWalkTargetVelocity(x, y, theta, frequency)
                time.sleep(CommandFreq)
        elif (buttons & cwiid.BTN_RIGHT):
            print("Walking right")
            for nao in naos:
                theta = -0.5
                nao.motion.setWalkTargetVelocity(x, y, theta, frequency)
                time.sleep(CommandFreq)
        elif (buttons & cwiid.BTN_MINUS):
            print("Going to rest")
            naos.motion.post.rest()
            print("Resting")
        elif (buttons & cwiid.BTN_PLUS):
            print("Standup")
            naos.posture.post.goToPosture("StandInit", 0.5)
            print("Done standing up")
        elif (buttons & cwiid.BTN_A):
            print("Robot")
            # Choregraphe bezier export in Python.
            names = list()
            times = list()
            keys = list()

            names.append("HeadPitch")
            times.append([1.26667, 3.53333, 4.33333])
            keys.append([[-0.012314, [3, -0.422222, 0], [3, 0.755556, 0]], [0.00609404, [3, -0.755556, 0], [3, 0.266667, 0]], [0.00609404, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("HeadYaw")
            times.append([1.26667, 3.53333, 4.33333])
            keys.append([[0.00762803, [3, -0.422222, 0], [3, 0.755556, 0]], [0.00762803, [3, -0.755556, 0], [3, 0.266667, 0]], [0.00762803, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LAnklePitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.191576, [3, -0.422222, 0], [3, 0.244444, 0]], [0.205383, [3, -0.244444, 0], [3, 0.511111, 0]], [0.183907, [3, -0.511111, 0], [3, 0.266667, 0]], [0.183907, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LAnkleRoll")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.0659823, [3, -0.422222, 0], [3, 0.244444, 0]], [0.0613804, [3, -0.244444, 0.00460191], [3, 0.511111, -0.00962217]], [-0.0107176, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.0107176, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LElbowRoll")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[-1.4772, [3, -0.422222, 0], [3, 0.488889, 0]], [-1.55697, [3, -0.488889, 0], [3, 0.266667, 0]], [-0.010696, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.010696, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LElbowYaw")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[-1.71812, [3, -0.422222, 0], [3, 0.488889, 0]], [-1.29627, [3, -0.488889, -0.323915], [3, 0.266667, 0.176681]], [-0.216335, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.216335, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LHand")
            times.append([1.26667, 3.53333, 4.33333])
            keys.append([[0.997114, [3, -0.422222, 0], [3, 0.755556, 0]], [0.995296, [3, -0.755556, 0], [3, 0.266667, 0]], [0.995296, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LHipPitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.179256, [3, -0.422222, 0], [3, 0.244444, 0]], [0.162382, [3, -0.244444, 0.0168733], [3, 0.511111, -0.0352806]], [-0.24106, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.24106, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LHipRoll")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.0580999, [3, -0.422222, 0], [3, 0.244444, 0]], [0.07344, [3, -0.244444, 0], [3, 0.511111, 0]], [-0.145922, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.145922, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LHipYawPitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[-0.730228, [3, -0.422222, 0], [3, 0.244444, 0]], [-0.739431, [3, -0.244444, 0], [3, 0.511111, 0]], [-0.487856, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.487856, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LKneePitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.185295, [3, -0.422222, 0], [3, 0.244444, 0]], [0.169954, [3, -0.244444, 0.00146728], [3, 0.511111, -0.00306794]], [0.166886, [3, -0.511111, 0], [3, 0.266667, 0]], [0.166886, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LShoulderPitch")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[1.53089, [3, -0.422222, 0], [3, 0.488889, 0]], [0.179436, [3, -0.488889, 0], [3, 0.266667, 0]], [1.7073, [3, -0.266667, 0], [3, 0.266667, 0]], [1.7073, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LShoulderRoll")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[0.039842, [3, -0.422222, 0], [3, 0.488889, 0]], [0, [3, -0.488889, 0], [3, 0.266667, 0]], [1.35601, [3, -0.266667, 0], [3, 0.266667, 0]], [1.34374, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("LWristYaw")
            times.append([1.26667, 3.53333, 4.33333])
            keys.append([[-0.277696, [3, -0.422222, 0], [3, 0.755556, 0]], [-0.289967, [3, -0.755556, 0], [3, 0.266667, 0]], [-0.289967, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RAnklePitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[-0.411138, [3, -0.422222, 0], [3, 0.244444, 0]], [-0.401935, [3, -0.244444, -0.00920312], [3, 0.511111, 0.0192429]], [0.352792, [3, -0.511111, 0], [3, 0.266667, 0]], [0.352792, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RAnkleRoll")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.0322537, [3, -0.422222, 0], [3, 0.244444, 0]], [0.0337877, [3, -0.244444, -0.00153397], [3, 0.511111, 0.00320739]], [0.248547, [3, -0.511111, 0], [3, 0.266667, 0]], [0.248547, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RElbowRoll")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[1.46348, [3, -0.422222, 0], [3, 0.488889, 0]], [1.56319, [3, -0.488889, 0], [3, 0.266667, 0]], [1.54171, [3, -0.266667, 0], [3, 0.266667, 0]], [1.54171, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RElbowYaw")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[1.52015, [3, -0.422222, 0], [3, 0.488889, 0]], [1.44499, [3, -0.488889, 0], [3, 0.266667, 0]], [1.65821, [3, -0.266667, 0], [3, 0.266667, 0]], [1.65668, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RHand")
            times.append([1.26667, 3.53333, 4.33333])
            keys.append([[1, [3, -0.422222, 0], [3, 0.755556, 0]], [1, [3, -0.755556, 0], [3, 0.266667, 0]], [1, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RHipPitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.489289, [3, -0.422222, 0], [3, 0.244444, 0]], [0.490823, [3, -0.244444, 0], [3, 0.511111, 0]], [-0.279246, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.279246, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RHipRoll")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[-0.148778, [3, -0.422222, 0], [3, 0.244444, 0]], [-0.15338, [3, -0.244444, 0.00460191], [3, 0.511111, -0.00962217]], [-0.257691, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.257691, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RKneePitch")
            times.append([1.26667, 2, 3.53333, 4.33333])
            keys.append([[0.47666, [3, -0.422222, 0], [3, 0.244444, 0]], [0.455184, [3, -0.244444, 0.0214763], [3, 0.511111, -0.044905]], [0.0195278, [3, -0.511111, 0], [3, 0.266667, 0]], [0.0195278, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RShoulderPitch")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[0.00464395, [3, -0.422222, 0], [3, 0.488889, 0]], [2.07247, [3, -0.488889, 0], [3, 0.266667, 0]], [1.56779, [3, -0.266667, 0], [3, 0.266667, 0]], [1.56779, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RShoulderRoll")
            times.append([1.26667, 2.73333, 3.53333, 4.33333])
            keys.append([[-0.11816, [3, -0.422222, 0], [3, 0.488889, 0]], [-0.154976, [3, -0.488889, 0.0138962], [3, 0.266667, -0.00757972]], [-0.182588, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.182588, [3, -0.266667, 0], [3, 0, 0]]])

            names.append("RWristYaw")
            times.append([1.26667, 3.53333, 4.33333])
            keys.append([[0.408002, [3, -0.422222, 0], [3, 0.755556, 0]], [0.41107, [3, -0.755556, 0], [3, 0.266667, 0]], [0.41107, [3, -0.266667, 0], [3, 0, 0]]])

            try:
                # uncomment the following line and modify the IP if you use this script outside Choregraphe.
                # motion = ALProxy("ALMotion", IP, 9559)
                # motion = ALProxy("ALMotion")
                naos.motion.post.angleInterpolationBezier(names, times, keys)
            except BaseException, err:
                print err
        elif (buttons & cwiid.BTN_B):
            print("Dance")
            # Choregraphe bezier export in Python.
            names = list()
            times = list()
            keys = list()

            names.append("HeadPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.237812, [3, -0.333333, 0], [3, 0.32, 0]], [-0.00617791, [3, -0.32, -0.054945], [3, 0.266667, 0.0457875]], [0.0643861, [3, -0.266667, 0], [3, 0.24, 0]], [0.0643861, [3, -0.24, 0], [3, 0.226667, 0]], [0.0643861, [3, -0.226667, 0], [3, 0.306667, 0]], [0.0643861, [3, -0.306667, 0], [3, 0.28, 0]], [0.0643861, [3, -0.28, 0], [3, 0.2, 0]], [0.153358, [3, -0.2, 0], [3, 0.2, 0]], [0.153358, [3, -0.2, 0], [3, 0.173333, 0]], [-0.190258, [3, -0.173333, 0], [3, 0.24, 0]], [-0.104354, [3, -0.24, 0], [3, 0.24, 0]], [-0.285367, [3, -0.24, 0], [3, 0.44, 0]], [0.00609397, [3, -0.44, -0.0716497], [3, 0.426667, 0.0694785]], [0.138018, [3, -0.426667, -0.039104], [3, 0.36, 0.032994]], [0.222388, [3, -0.36, 0], [3, 0.293333, 0]], [0.222388, [3, -0.293333, 0], [3, 0.253333, 0]], [0.0735901, [3, -0.253333, 0], [3, 0.24, 0]], [0.294486, [3, -0.24, 0], [3, 0.293333, 0]], [-0.227074, [3, -0.293333, 0.00738187], [3, 0.426667, -0.0107373]], [-0.237812, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("HeadYaw")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-4.19617e-05, [3, -0.333333, 0], [3, 0.32, 0]], [-0.312978, [3, -0.32, 0], [3, 0.266667, 0]], [0.312894, [3, -0.266667, 0], [3, 0.24, 0]], [-0.233211, [3, -0.24, 0], [3, 0.226667, 0]], [0.315962, [3, -0.226667, 0], [3, 0.306667, 0]], [0.315962, [3, -0.306667, 0], [3, 0.28, 0]], [-0.181053, [3, -0.28, 0.130049], [3, 0.2, -0.0928922]], [-0.352862, [3, -0.2, 0], [3, 0.2, 0]], [-0.352862, [3, -0.2, 0], [3, 0.173333, 0]], [-0.234743, [3, -0.173333, -0.0789104], [3, 0.24, 0.109261]], [0.211651, [3, -0.24, -0.128345], [3, 0.24, 0.128345]], [0.535324, [3, -0.24, 0], [3, 0.44, 0]], [0.308291, [3, -0.44, 0.0864468], [3, 0.426667, -0.0838272]], [0.024502, [3, -0.426667, 0.104], [3, 0.36, -0.08775]], [-0.266959, [3, -0.36, 0], [3, 0.293333, 0]], [0.550664, [3, -0.293333, 0], [3, 0.253333, 0]], [-0.119694, [3, -0.253333, 0], [3, 0.24, 0]], [0.501576, [3, -0.24, 0], [3, 0.293333, 0]], [-0.472515, [3, -0.293333, 0], [3, 0.426667, 0]], [-4.19617e-05, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LAnklePitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[0.0966001, [3, -0.333333, 0], [3, 0.32, 0]], [0.0966001, [3, -0.32, 0], [3, 0.266667, 0]], [0.095066, [3, -0.266667, 0], [3, 0.24, 0]], [0.095066, [3, -0.24, 0], [3, 0.226667, 0]], [0.0966001, [3, -0.226667, 0], [3, 0.306667, 0]], [0.0966001, [3, -0.306667, 0], [3, 0.28, 0]], [0.095066, [3, -0.28, 0], [3, 1.49333, 0]], [0.0966001, [3, -1.49333, -0.000795438], [3, 0.426667, 0.000227268]], [0.0981341, [3, -0.426667, 0], [3, 0.36, 0]], [0.0966001, [3, -0.36, 0], [3, 0.293333, 0]], [0.0966001, [3, -0.293333, 0], [3, 0.253333, 0]], [0.0966001, [3, -0.253333, 0], [3, 0.24, 0]], [-0.190258, [3, -0.24, 0.0878983], [3, 0.293333, -0.107431]], [-0.489389, [3, -0.293333, 0], [3, 0.426667, 0]], [0.0981341, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LAnkleRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.116542, [3, -0.333333, 0], [3, 0.32, 0]], [-0.116542, [3, -0.32, 0], [3, 0.266667, 0]], [-0.116542, [3, -0.266667, 0], [3, 0.24, 0]], [-0.116542, [3, -0.24, 0], [3, 0.226667, 0]], [-0.116542, [3, -0.226667, 0], [3, 0.306667, 0]], [-0.116542, [3, -0.306667, 0], [3, 0.28, 0]], [-0.116542, [3, -0.28, 0], [3, 1.49333, 0]], [-0.116542, [3, -1.49333, 0], [3, 0.426667, 0]], [-0.115008, [3, -0.426667, 0], [3, 0.36, 0]], [-0.116542, [3, -0.36, 0], [3, 0.293333, 0]], [-0.116542, [3, -0.293333, 0], [3, 0.253333, 0]], [-0.251533, [3, -0.253333, 0], [3, 0.24, 0]], [0.0583338, [3, -0.24, 0], [3, 0.293333, 0]], [-0.211651, [3, -0.293333, 0], [3, 0.426667, 0]], [-0.115008, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LElbowRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[-0.391128, [3, -0.333333, 0], [3, 0.32, 0]], [-0.391128, [3, -0.32, 0], [3, 0.266667, 0]], [-0.406468, [3, -0.266667, 0], [3, 0.24, 0]], [-0.406468, [3, -0.24, 0], [3, 0.226667, 0]], [-0.406468, [3, -0.226667, 0], [3, 0.16, 0]], [-0.406468, [3, -0.16, 0], [3, 0.146667, 0]], [-0.406468, [3, -0.146667, 0], [3, 0.146667, 0]], [-1.01393, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.928028, [3, -0.133333, 0], [3, 0.2, 0]], [-0.934165, [3, -0.2, 0], [3, 0.2, 0]], [-0.934165, [3, -0.2, 0], [3, 0.173333, 0]], [-0.934165, [3, -0.173333, 0], [3, 0.24, 0]], [-0.782298, [3, -0.24, 0], [3, 0.24, 0]], [-1.44345, [3, -0.24, 0], [3, 0.44, 0]], [-1.44345, [3, -0.44, 0], [3, 0.426667, 0]], [-0.429478, [3, -0.426667, 0], [3, 0.36, 0]], [-0.435615, [3, -0.36, 0.00613659], [3, 0.173333, -0.00295465]], [-1.017, [3, -0.173333, 0.189751], [3, 0.12, -0.131366]], [-1.39897, [3, -0.12, 0.0108988], [3, 0.253333, -0.0230086]], [-1.42198, [3, -0.253333, 0], [3, 0.24, 0]], [-1.42198, [3, -0.24, 0], [3, 0.293333, 0]], [-1.52936, [3, -0.293333, 0], [3, 0.226667, 0]], [-0.414139, [3, -0.226667, 0], [3, 0.2, 0]], [-0.417205, [3, -0.2, 0], [3, 0, 0]]])

            names.append("LElbowYaw")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[-1.21957, [3, -0.333333, 0], [3, 0.32, 0]], [-1.21957, [3, -0.32, 0], [3, 0.266667, 0]], [-1.20577, [3, -0.266667, 0], [3, 0.24, 0]], [-1.20577, [3, -0.24, 0], [3, 0.226667, 0]], [-1.43587, [3, -0.226667, 0], [3, 0.16, 0]], [-1.43587, [3, -0.16, 0], [3, 0.146667, 0]], [-1.43587, [3, -0.146667, 0], [3, 0.146667, 0]], [-1.23951, [3, -0.146667, -0.196353], [3, 0.133333, 0.178503]], [-0.0123138, [3, -0.133333, -0.00409062], [3, 0.2, 0.00613593]], [-0.00617791, [3, -0.2, 0], [3, 0.2, 0]], [-0.00617791, [3, -0.2, 0], [3, 0.173333, 0]], [-0.0107799, [3, -0.173333, 0.00460194], [3, 0.24, -0.00637192]], [-1.34689, [3, -0.24, 0], [3, 0.24, 0]], [-0.983336, [3, -0.24, 0], [3, 0.44, 0]], [-0.983336, [3, -0.44, 0], [3, 0.426667, 0]], [0.214717, [3, -0.426667, 0], [3, 0.36, 0]], [0.205514, [3, -0.36, 0.00920312], [3, 0.173333, -0.00443113]], [0.075124, [3, -0.173333, 0.0404883], [3, 0.12, -0.0280304]], [-4.19617e-05, [3, -0.12, 0.00799299], [3, 0.253333, -0.0168741]], [-0.016916, [3, -0.253333, 0], [3, 0.24, 0]], [-0.016916, [3, -0.24, 0], [3, 0.293333, 0]], [-0.237812, [3, -0.293333, 0.220896], [3, 0.226667, -0.170692]], [-1.28247, [3, -0.226667, 0], [3, 0.2, 0]], [-1.18582, [3, -0.2, 0], [3, 0, 0]]])

            names.append("LHand")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[0.3056, [3, -0.333333, 0], [3, 0.32, 0]], [0.3056, [3, -0.32, 0], [3, 0.266667, 0]], [0.8488, [3, -0.266667, 0], [3, 0.24, 0]], [0.8484, [3, -0.24, 0], [3, 0.226667, 0]], [0.8484, [3, -0.226667, 0], [3, 0.16, 0]], [0.8484, [3, -0.16, 0], [3, 0.146667, 0]], [0.8488, [3, -0.146667, 0], [3, 0.146667, 0]], [0.8484, [3, -0.146667, 0], [3, 0.133333, 0]], [0.8488, [3, -0.133333, 0], [3, 0.2, 0]], [0.8488, [3, -0.2, 0], [3, 0.2, 0]], [0.8488, [3, -0.2, 0], [3, 0.173333, 0]], [0.8488, [3, -0.173333, 0], [3, 0.24, 0]], [0.8484, [3, -0.24, 0], [3, 0.24, 0]], [0.8484, [3, -0.24, 0], [3, 0.44, 0]], [0.8488, [3, -0.44, 0], [3, 0.426667, 0]], [0.8484, [3, -0.426667, 0.000361577], [3, 0.36, -0.000305081]], [0.8468, [3, -0.36, 0], [3, 0.173333, 0]], [0.8468, [3, -0.173333, 0], [3, 0.12, 0]], [0.8468, [3, -0.12, 0], [3, 0.253333, 0]], [0.8484, [3, -0.253333, 0], [3, 0.24, 0]], [0.8484, [3, -0.24, 0], [3, 0.293333, 0]], [0.8472, [3, -0.293333, 0.00120002], [3, 0.226667, -0.000927288]], [0.3056, [3, -0.226667, 0], [3, 0.2, 0]], [0.3056, [3, -0.2, 0], [3, 0, 0]]])

            names.append("LHipPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[0.136568, [3, -0.333333, 0], [3, 0.32, 0]], [0.135034, [3, -0.32, 0.000557838], [3, 0.266667, -0.000464865]], [0.1335, [3, -0.266667, 0], [3, 0.24, 0]], [0.136568, [3, -0.24, 0], [3, 0.226667, 0]], [0.135034, [3, -0.226667, 0], [3, 0.306667, 0]], [0.135034, [3, -0.306667, 0], [3, 0.28, 0]], [0.135034, [3, -0.28, 0], [3, 1.49333, 0]], [0.135034, [3, -1.49333, 0], [3, 0.426667, 0]], [0.135034, [3, -0.426667, 0], [3, 0.36, 0]], [0.136568, [3, -0.36, 0], [3, 0.293333, 0]], [0.136568, [3, -0.293333, 0], [3, 0.253333, 0]], [0.162646, [3, -0.253333, 0], [3, 0.24, 0]], [0.0429941, [3, -0.24, 0.104695], [3, 0.293333, -0.127961]], [-0.535324, [3, -0.293333, 0], [3, 0.426667, 0]], [0.14117, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LHipRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[0.115092, [3, -0.333333, 0], [3, 0.32, 0]], [0.115092, [3, -0.32, 0], [3, 0.266667, 0]], [0.115092, [3, -0.266667, 0], [3, 0.24, 0]], [0.115092, [3, -0.24, 0], [3, 0.226667, 0]], [0.115092, [3, -0.226667, 0], [3, 0.306667, 0]], [0.115092, [3, -0.306667, 0], [3, 0.28, 0]], [0.115092, [3, -0.28, 0], [3, 1.49333, 0]], [0.115092, [3, -1.49333, 0], [3, 0.426667, 0]], [0.115092, [3, -0.426667, 0], [3, 0.36, 0]], [0.115092, [3, -0.36, 0], [3, 0.293333, 0]], [0.115092, [3, -0.293333, 0], [3, 0.253333, 0]], [0.312978, [3, -0.253333, 0], [3, 0.24, 0]], [-0.260738, [3, -0.24, 0], [3, 0.293333, 0]], [0.431096, [3, -0.293333, 0], [3, 0.426667, 0]], [0.113558, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LHipYawPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.1733, [3, -0.333333, 0], [3, 0.32, 0]], [-0.1733, [3, -0.32, 0], [3, 0.266667, 0]], [-0.1733, [3, -0.266667, 0], [3, 0.24, 0]], [-0.174835, [3, -0.24, 0], [3, 0.226667, 0]], [-0.174835, [3, -0.226667, 0], [3, 0.306667, 0]], [-0.1733, [3, -0.306667, 0], [3, 0.28, 0]], [-0.1733, [3, -0.28, 0], [3, 1.49333, 0]], [-0.1733, [3, -1.49333, 0], [3, 0.426667, 0]], [-0.1733, [3, -0.426667, 0], [3, 0.36, 0]], [-0.1733, [3, -0.36, 0], [3, 0.293333, 0]], [-0.1733, [3, -0.293333, 0], [3, 0.253333, 0]], [-0.171766, [3, -0.253333, 0], [3, 0.24, 0]], [-0.240796, [3, -0.24, 0.0607464], [3, 0.293333, -0.0742457]], [-0.576742, [3, -0.293333, 0], [3, 0.426667, 0]], [-0.1733, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LKneePitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.090548, [3, -0.333333, 0], [3, 0.32, 0]], [-0.090548, [3, -0.32, 0], [3, 0.266667, 0]], [-0.092082, [3, -0.266667, 0.000273242], [3, 0.24, -0.000245918]], [-0.0923279, [3, -0.24, 0], [3, 0.226667, 0]], [-0.092082, [3, -0.226667, 0], [3, 0.306667, 0]], [-0.092082, [3, -0.306667, 0], [3, 0.28, 0]], [-0.092082, [3, -0.28, 0], [3, 1.49333, 0]], [-0.090548, [3, -1.49333, 0], [3, 0.426667, 0]], [-0.090548, [3, -0.426667, 0], [3, 0.36, 0]], [-0.0890141, [3, -0.36, 0], [3, 0.293333, 0]], [-0.090548, [3, -0.293333, 0.000548737], [3, 0.253333, -0.000473909]], [-0.092082, [3, -0.253333, 0], [3, 0.24, 0]], [0.423342, [3, -0.24, -0.214223], [3, 0.293333, 0.261828]], [1.33607, [3, -0.293333, 0], [3, 0.426667, 0]], [-0.092082, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("LShoulderPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[1.49254, [3, -0.333333, 0], [3, 0.32, 0]], [1.49254, [3, -0.32, 0], [3, 0.266667, 0]], [0.397265, [3, -0.266667, 0], [3, 0.24, 0]], [0.397265, [3, -0.24, 0], [3, 0.226667, 0]], [0.432547, [3, -0.226667, 0], [3, 0.16, 0]], [0.432547, [3, -0.16, 0], [3, 0.146667, 0]], [0.434081, [3, -0.146667, 0], [3, 0.146667, 0]], [0.239262, [3, -0.146667, 0.0632107], [3, 0.133333, -0.0574642]], [0.0720561, [3, -0.133333, 0], [3, 0.2, 0]], [0.130348, [3, -0.2, -0.0143173], [3, 0.2, 0.0143173]], [0.15796, [3, -0.2, 0], [3, 0.173333, 0]], [0.095066, [3, -0.173333, 0], [3, 0.24, 0]], [0.223922, [3, -0.24, 0], [3, 0.24, 0]], [-0.690342, [3, -0.24, 0], [3, 0.44, 0]], [-0.690342, [3, -0.44, 0], [3, 0.426667, 0]], [0.622761, [3, -0.426667, -0.0472703], [3, 0.36, 0.0398843]], [0.662646, [3, -0.36, -0.0398843], [3, 0.173333, 0.0192036]], [0.920358, [3, -0.173333, -0.151076], [3, 0.12, 0.104591]], [1.42965, [3, -0.12, 0], [3, 0.253333, 0]], [1.41891, [3, -0.253333, 0], [3, 0.24, 0]], [1.42044, [3, -0.24, 0], [3, 0.293333, 0]], [1.14279, [3, -0.293333, 0], [3, 0.226667, 0]], [1.43271, [3, -0.226667, -0.0641086], [3, 0.2, 0.0565664]], [1.50481, [3, -0.2, 0], [3, 0, 0]]])

            names.append("LShoulderRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[0.130348, [3, -0.333333, 0], [3, 0.32, 0]], [0.130348, [3, -0.32, 0], [3, 0.266667, 0]], [0.0137641, [3, -0.266667, 0], [3, 0.24, 0]], [0.0137641, [3, -0.24, 0], [3, 0.226667, 0]], [0.0106959, [3, -0.226667, 0], [3, 0.16, 0]], [0.0106959, [3, -0.16, 0], [3, 0.146667, 0]], [0.0106959, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.147306, [3, -0.146667, 0.050622], [3, 0.133333, -0.04602]], [-0.27923, [3, -0.133333, 0], [3, 0.2, 0]], [-0.247016, [3, -0.2, 0], [3, 0.2, 0]], [-0.248551, [3, -0.2, 0], [3, 0.173333, 0]], [-0.247016, [3, -0.173333, -0.00153415], [3, 0.24, 0.0021242]], [-0.0706061, [3, -0.24, -0.0917845], [3, 0.24, 0.0917845]], [0.303691, [3, -0.24, 0], [3, 0.44, 0]], [0.302157, [3, -0.44, 0.00153415], [3, 0.426667, -0.00148766]], [-0.314159, [3, -0.426667, 0], [3, 0.36, 0]], [-0.266959, [3, -0.36, -0.0472007], [3, 0.173333, 0.0227263]], [0.375789, [3, -0.173333, -0.198514], [3, 0.12, 0.137433]], [0.74088, [3, -0.12, -0.0188926], [3, 0.253333, 0.0398843]], [0.780764, [3, -0.253333, 0], [3, 0.24, 0]], [0.771559, [3, -0.24, 0.00920488], [3, 0.293333, -0.0112504]], [0.67952, [3, -0.293333, 0.0816296], [3, 0.226667, -0.0630774]], [0.337438, [3, -0.226667, 0.0972491], [3, 0.2, -0.0858081]], [0.130348, [3, -0.2, 0], [3, 0, 0]]])

            names.append("LWristYaw")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[0.147222, [3, -0.333333, 0], [3, 0.32, 0]], [0.144154, [3, -0.32, 0], [3, 0.266667, 0]], [1.14586, [3, -0.266667, 0], [3, 0.24, 0]], [1.14586, [3, -0.24, 0], [3, 0.226667, 0]], [-1.76875, [3, -0.226667, 0], [3, 0.16, 0]], [-1.76875, [3, -0.16, 0], [3, 0.146667, 0]], [-1.76722, [3, -0.146667, -0.00153598], [3, 0.146667, 0.00153598]], [-0.77778, [3, -0.146667, -0.260075], [3, 0.133333, 0.236432]], [-0.277696, [3, -0.133333, 0], [3, 0.2, 0]], [-0.309909, [3, -0.2, 0], [3, 0.2, 0]], [-0.308375, [3, -0.2, 0], [3, 0.173333, 0]], [-0.308375, [3, -0.173333, 0], [3, 0.24, 0]], [-0.30224, [3, -0.24, 0], [3, 0.24, 0]], [-0.846809, [3, -0.24, 0], [3, 0.44, 0]], [-0.846809, [3, -0.44, 0], [3, 0.426667, 0]], [-0.461776, [3, -0.426667, 0], [3, 0.36, 0]], [-0.48632, [3, -0.36, 0.0245446], [3, 0.173333, -0.0118178]], [-0.731761, [3, -0.173333, 0.0818829], [3, 0.12, -0.0566881]], [-0.902033, [3, -0.12, 0.00871956], [3, 0.253333, -0.018408]], [-0.920441, [3, -0.253333, 0], [3, 0.24, 0]], [-0.920441, [3, -0.24, 0], [3, 0.293333, 0]], [-0.38661, [3, -0.293333, -0.190373], [3, 0.226667, 0.147107]], [0.091998, [3, -0.226667, 0], [3, 0.2, 0]], [0.0889301, [3, -0.2, 0], [3, 0, 0]]])

            names.append("RAnklePitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[0.10282, [3, -0.333333, 0], [3, 0.32, 0]], [0.10282, [3, -0.32, 0], [3, 0.266667, 0]], [0.101286, [3, -0.266667, 0], [3, 0.24, 0]], [0.101286, [3, -0.24, 0], [3, 0.226667, 0]], [0.101286, [3, -0.226667, 0], [3, 0.306667, 0]], [0.10282, [3, -0.306667, 0], [3, 0.28, 0]], [0.10282, [3, -0.28, 0], [3, 1.49333, 0]], [0.101286, [3, -1.49333, 0], [3, 0.426667, 0]], [0.104354, [3, -0.426667, 0], [3, 0.36, 0]], [0.10282, [3, -0.36, 0], [3, 0.293333, 0]], [0.10282, [3, -0.293333, 0], [3, 0.253333, 0]], [-0.095066, [3, -0.253333, 0.0803484], [3, 0.24, -0.0761195]], [-0.366584, [3, -0.24, 0.0837565], [3, 0.293333, -0.102369]], [-0.653443, [3, -0.293333, 0], [3, 0.426667, 0]], [0.105888, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("RAnkleRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[0.073674, [3, -0.333333, 0], [3, 0.32, 0]], [0.075208, [3, -0.32, 0], [3, 0.266667, 0]], [0.073674, [3, -0.266667, 0], [3, 0.24, 0]], [0.075208, [3, -0.24, 0], [3, 0.226667, 0]], [0.075208, [3, -0.226667, 0], [3, 0.306667, 0]], [0.073674, [3, -0.306667, 0], [3, 0.28, 0]], [0.075208, [3, -0.28, 0], [3, 1.49333, 0]], [0.073674, [3, -1.49333, 0.000795393], [3, 0.426667, -0.000227255]], [0.07214, [3, -0.426667, 0], [3, 0.36, 0]], [0.073674, [3, -0.36, 0], [3, 0.293333, 0]], [0.073674, [3, -0.293333, 0], [3, 0.253333, 0]], [0.00771189, [3, -0.253333, 0], [3, 0.24, 0]], [0.391212, [3, -0.24, 0], [3, 0.293333, 0]], [0.021518, [3, -0.293333, 0], [3, 0.426667, 0]], [0.07214, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("RElbowRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[0.389678, [3, -0.333333, 0], [3, 0.32, 0]], [0.401949, [3, -0.32, 0], [3, 0.266667, 0]], [0.401949, [3, -0.266667, 0], [3, 0.24, 0]], [0.418823, [3, -0.24, 0], [3, 0.226667, 0]], [0.418823, [3, -0.226667, 0], [3, 0.16, 0]], [1.22417, [3, -0.16, 0], [3, 0.146667, 0]], [1.20423, [3, -0.146667, 0.01534], [3, 0.146667, -0.01534]], [1.13213, [3, -0.146667, 0.00168753], [3, 0.133333, -0.00153411]], [1.1306, [3, -0.133333, 0.00153411], [3, 0.2, -0.00230117]], [0.299172, [3, -0.2, 0], [3, 0.2, 0]], [0.684206, [3, -0.2, -0.222156], [3, 0.173333, 0.192535]], [1.54325, [3, -0.173333, 0], [3, 0.24, 0]], [1.53404, [3, -0.24, 0.00153411], [3, 0.24, -0.00153411]], [1.53251, [3, -0.24, 0.00153411], [3, 0.44, -0.00281254]], [0.681137, [3, -0.44, 0], [3, 0.426667, 0]], [0.681137, [3, -0.426667, 0], [3, 0.36, 0]], [1.34843, [3, -0.36, 0], [3, 0.173333, 0]], [1.28247, [3, -0.173333, 0], [3, 0.12, 0]], [1.284, [3, -0.12, -0.00147917], [3, 0.253333, 0.00312269]], [1.29627, [3, -0.253333, 0], [3, 0.24, 0]], [1.29474, [3, -0.24, 0.00153411], [3, 0.293333, -0.00187503]], [1.27019, [3, -0.293333, 0.0245428], [3, 0.226667, -0.0189649]], [0.417291, [3, -0.226667, 0], [3, 0.2, 0]], [0.418823, [3, -0.2, 0], [3, 0, 0]]])

            names.append("RElbowYaw")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[1.17654, [3, -0.333333, 0], [3, 0.32, 0]], [1.15506, [3, -0.32, 0], [3, 0.266667, 0]], [1.15506, [3, -0.266667, 0], [3, 0.24, 0]], [1.83308, [3, -0.24, 0], [3, 0.226667, 0]], [1.83155, [3, -0.226667, 0.00153585], [3, 0.16, -0.00108413]], [1.26397, [3, -0.16, 0.293993], [3, 0.146667, -0.269494]], [0.141086, [3, -0.146667, 0.156468], [3, 0.146667, -0.156468]], [-0.0153821, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.0153821, [3, -0.133333, 0], [3, 0.2, 0]], [-0.719487, [3, -0.2, 0], [3, 0.2, 0]], [1.33607, [3, -0.2, 0], [3, 0.173333, 0]], [1.08603, [3, -0.173333, 0], [3, 0.24, 0]], [1.09217, [3, -0.24, 0], [3, 0.24, 0]], [1.09217, [3, -0.24, 0], [3, 0.44, 0]], [-0.092082, [3, -0.44, 0], [3, 0.426667, 0]], [-0.092082, [3, -0.426667, 0], [3, 0.36, 0]], [-0.286901, [3, -0.36, 0], [3, 0.173333, 0]], [-0.251617, [3, -0.173333, -0.00936689], [3, 0.12, 0.00648477]], [-0.239346, [3, -0.12, -0.00361582], [3, 0.253333, 0.00763341]], [-0.217869, [3, -0.253333, 0], [3, 0.24, 0]], [-0.222472, [3, -0.24, 0], [3, 0.293333, 0]], [-0.193327, [3, -0.293333, -0.0291453], [3, 0.226667, 0.0225213]], [1.17807, [3, -0.226667, 0], [3, 0.2, 0]], [1.16273, [3, -0.2, 0], [3, 0, 0]]])

            names.append("RHand")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[0.31, [3, -0.333333, 0], [3, 0.32, 0]], [0.9304, [3, -0.32, 0], [3, 0.266667, 0]], [0.9304, [3, -0.266667, 0], [3, 0.24, 0]], [0.9304, [3, -0.24, 0], [3, 0.226667, 0]], [0.9304, [3, -0.226667, 0], [3, 0.16, 0]], [0.9304, [3, -0.16, 0], [3, 0.146667, 0]], [0.9304, [3, -0.146667, 0], [3, 0.146667, 0]], [0.9304, [3, -0.146667, 0], [3, 0.133333, 0]], [0.9304, [3, -0.133333, 0], [3, 0.2, 0]], [0.9304, [3, -0.2, 0], [3, 0.2, 0]], [0.9304, [3, -0.2, 0], [3, 0.173333, 0]], [0.9304, [3, -0.173333, 0], [3, 0.24, 0]], [0.9304, [3, -0.24, 0], [3, 0.24, 0]], [0.9304, [3, -0.24, 0], [3, 0.44, 0]], [0.9304, [3, -0.44, 0], [3, 0.426667, 0]], [0.9304, [3, -0.426667, 0], [3, 0.36, 0]], [0.9284, [3, -0.36, 0], [3, 0.173333, 0]], [0.9284, [3, -0.173333, 0], [3, 0.12, 0]], [0.9284, [3, -0.12, 0], [3, 0.253333, 0]], [0.9304, [3, -0.253333, 0], [3, 0.24, 0]], [0.9304, [3, -0.24, 0], [3, 0.293333, 0]], [0.9284, [3, -0.293333, 0.00200003], [3, 0.226667, -0.00154548]], [0.3096, [3, -0.226667, 0.00362666], [3, 0.2, -0.00319999]], [0.3064, [3, -0.2, 0], [3, 0, 0]]])

            names.append("RHipPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[0.131882, [3, -0.333333, 0], [3, 0.32, 0]], [0.131882, [3, -0.32, 0], [3, 0.266667, 0]], [0.130348, [3, -0.266667, 0], [3, 0.24, 0]], [0.131882, [3, -0.24, 0], [3, 0.226667, 0]], [0.131882, [3, -0.226667, 0], [3, 0.306667, 0]], [0.131882, [3, -0.306667, 0], [3, 0.28, 0]], [0.128814, [3, -0.28, 0], [3, 1.49333, 0]], [0.130348, [3, -1.49333, -0.000795393], [3, 0.426667, 0.000227255]], [0.131882, [3, -0.426667, 0], [3, 0.36, 0]], [0.131882, [3, -0.36, 0], [3, 0.293333, 0]], [0.131882, [3, -0.293333, 0], [3, 0.253333, 0]], [0.133416, [3, -0.253333, 0], [3, 0.24, 0]], [0.131882, [3, -0.24, 0.00153396], [3, 0.293333, -0.00187485]], [-0.0767419, [3, -0.293333, 0], [3, 0.426667, 0]], [0.130348, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("RHipRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.0643861, [3, -0.333333, 0], [3, 0.32, 0]], [-0.0643861, [3, -0.32, 0], [3, 0.266667, 0]], [-0.0643861, [3, -0.266667, 0], [3, 0.24, 0]], [-0.0643861, [3, -0.24, 0], [3, 0.226667, 0]], [-0.0643861, [3, -0.226667, 0], [3, 0.306667, 0]], [-0.0643861, [3, -0.306667, 0], [3, 0.28, 0]], [-0.0643861, [3, -0.28, 0], [3, 1.49333, 0]], [-0.0643861, [3, -1.49333, 0], [3, 0.426667, 0]], [-0.0643861, [3, -0.426667, 0], [3, 0.36, 0]], [-0.0643861, [3, -0.36, 0], [3, 0.293333, 0]], [-0.0643861, [3, -0.293333, 0], [3, 0.253333, 0]], [0.046062, [3, -0.253333, 0], [3, 0.24, 0]], [-0.671851, [3, -0.24, 0], [3, 0.293333, 0]], [0.0767419, [3, -0.293333, 0], [3, 0.426667, 0]], [-0.06592, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("RHipYawPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.1733, [3, -0.333333, 0], [3, 0.32, 0]], [-0.1733, [3, -0.32, 0], [3, 0.266667, 0]], [-0.1733, [3, -0.266667, 0], [3, 0.24, 0]], [-0.174835, [3, -0.24, 0], [3, 0.226667, 0]], [-0.174835, [3, -0.226667, 0], [3, 0.306667, 0]], [-0.1733, [3, -0.306667, 0], [3, 0.28, 0]], [-0.1733, [3, -0.28, 0], [3, 1.49333, 0]], [-0.1733, [3, -1.49333, 0], [3, 0.426667, 0]], [-0.1733, [3, -0.426667, 0], [3, 0.36, 0]], [-0.1733, [3, -0.36, 0], [3, 0.293333, 0]], [-0.1733, [3, -0.293333, 0], [3, 0.253333, 0]], [-0.171766, [3, -0.253333, 0], [3, 0.24, 0]], [-0.240796, [3, -0.24, 0.0607464], [3, 0.293333, -0.0742457]], [-0.576742, [3, -0.293333, 0], [3, 0.426667, 0]], [-0.1733, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("RKneePitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
            keys.append([[-0.091998, [3, -0.333333, 0], [3, 0.32, 0]], [-0.091998, [3, -0.32, 0], [3, 0.266667, 0]], [-0.0923279, [3, -0.266667, 0], [3, 0.24, 0]], [-0.0923279, [3, -0.24, 0], [3, 0.226667, 0]], [-0.0923279, [3, -0.226667, 0], [3, 0.306667, 0]], [-0.0923279, [3, -0.306667, 0], [3, 0.28, 0]], [-0.091998, [3, -0.28, 0], [3, 1.49333, 0]], [-0.091998, [3, -1.49333, 0], [3, 0.426667, 0]], [-0.091998, [3, -0.426667, 0], [3, 0.36, 0]], [-0.091998, [3, -0.36, 0], [3, 0.293333, 0]], [-0.091998, [3, -0.293333, 0], [3, 0.253333, 0]], [0.131966, [3, -0.253333, -0.09374], [3, 0.24, 0.0888063]], [0.455641, [3, -0.24, -0.155087], [3, 0.293333, 0.189551]], [1.16588, [3, -0.293333, 0], [3, 0.426667, 0]], [-0.0923279, [3, -0.426667, 0], [3, 0, 0]]])

            names.append("RShoulderPitch")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[1.49569, [3, -0.333333, 0], [3, 0.32, 0]], [0.464844, [3, -0.32, 0], [3, 0.266667, 0]], [0.466378, [3, -0.266667, 0], [3, 0.24, 0]], [0.46331, [3, -0.24, 0], [3, 0.226667, 0]], [0.46331, [3, -0.226667, 0], [3, 0.16, 0]], [0.44797, [3, -0.16, 0.0153397], [3, 0.146667, -0.0140614]], [0.346725, [3, -0.146667, 0], [3, 0.146667, 0]], [0.518534, [3, -0.146667, -0.0366944], [3, 0.133333, 0.0333585]], [0.556884, [3, -0.133333, -0.0184081], [3, 0.2, 0.0276121]], [0.656595, [3, -0.2, 0], [3, 0.2, 0]], [0.492455, [3, -0.2, 0.164139], [3, 0.173333, -0.142254]], [-0.621227, [3, -0.173333, 0], [3, 0.24, 0]], [-0.573674, [3, -0.24, 0], [3, 0.24, 0]], [-0.573674, [3, -0.24, 0], [3, 0.44, 0]], [1.02015, [3, -0.44, -0.00158206], [3, 0.426667, 0.00153411]], [1.02169, [3, -0.426667, -0.00153411], [3, 0.36, 0.00129441]], [1.08918, [3, -0.36, 0], [3, 0.173333, 0]], [1.08611, [3, -0.173333, 0], [3, 0.12, 0]], [1.17355, [3, -0.12, -0.00363267], [3, 0.253333, 0.00766897]], [1.18122, [3, -0.253333, 0], [3, 0.24, 0]], [1.18122, [3, -0.24, 0], [3, 0.293333, 0]], [1.15975, [3, -0.293333, 0], [3, 0.226667, 0]], [1.37911, [3, -0.226667, -0.0581321], [3, 0.2, 0.051293]], [1.48802, [3, -0.2, 0], [3, 0, 0]]])

            names.append("RShoulderRoll")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[-0.0951499, [3, -0.333333, 0], [3, 0.32, 0]], [0.076658, [3, -0.32, 0], [3, 0.266667, 0]], [0.076658, [3, -0.266667, 0], [3, 0.24, 0]], [0.16563, [3, -0.24, 0], [3, 0.226667, 0]], [0.16563, [3, -0.226667, 0], [3, 0.16, 0]], [0.314159, [3, -0.16, 0], [3, 0.146667, 0]], [0.314159, [3, -0.146667, 0], [3, 0.146667, 0]], [0.314159, [3, -0.146667, 0], [3, 0.133333, 0]], [0.314159, [3, -0.133333, 0], [3, 0.2, 0]], [-0.161112, [3, -0.2, 0.0766995], [3, 0.2, -0.0766995]], [-0.237812, [3, -0.2, 0.0178054], [3, 0.173333, -0.0154313]], [-0.260822, [3, -0.173333, 0], [3, 0.24, 0]], [-0.254685, [3, -0.24, 0], [3, 0.24, 0]], [-0.260822, [3, -0.24, 0], [3, 0.44, 0]], [0.306757, [3, -0.44, 0], [3, 0.426667, 0]], [0.303691, [3, -0.426667, 0.00306653], [3, 0.36, -0.00258738]], [-0.60904, [3, -0.36, 0.00318624], [3, 0.173333, -0.00153411]], [-0.610574, [3, -0.173333, 0], [3, 0.12, 0]], [-0.610574, [3, -0.12, 0], [3, 0.253333, 0]], [-0.638187, [3, -0.253333, 0.00161941], [3, 0.24, -0.00153418]], [-0.639721, [3, -0.24, 0], [3, 0.293333, 0]], [-0.630516, [3, -0.293333, -0.00920488], [3, 0.226667, 0.00711287]], [-0.319114, [3, -0.226667, -0.0934462], [3, 0.2, 0.0824525]], [-0.10282, [3, -0.2, 0], [3, 0, 0]]])

            names.append("RWristYaw")
            times.append([1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28, 13.64, 14.4, 15.12, 16, 16.68, 17.28])
            keys.append([[0.05825, [3, -0.333333, 0], [3, 0.32, 0]], [-1.15821, [3, -0.32, 0], [3, 0.266667, 0]], [-1.15821, [3, -0.266667, 0], [3, 0.24, 0]], [1.19648, [3, -0.24, 0], [3, 0.226667, 0]], [1.19648, [3, -0.226667, 0], [3, 0.16, 0]], [0.561403, [3, -0.16, 0.194484], [3, 0.146667, -0.178277]], [0.078192, [3, -0.146667, 0.052156], [3, 0.146667, -0.052156]], [0.0260359, [3, -0.146667, 0], [3, 0.133333, 0]], [0.0275701, [3, -0.133333, -0.00153415], [3, 0.2, 0.00230122]], [0.628898, [3, -0.2, 0], [3, 0.2, 0]], [-0.351328, [3, -0.2, 0], [3, 0.173333, 0]], [0.977116, [3, -0.173333, 0], [3, 0.24, 0]], [0.960242, [3, -0.24, 0], [3, 0.24, 0]], [0.960242, [3, -0.24, 0], [3, 0.44, 0]], [0.694859, [3, -0.44, 0], [3, 0.426667, 0]], [0.694859, [3, -0.426667, 0], [3, 0.36, 0]], [0.944902, [3, -0.36, 0], [3, 0.173333, 0]], [0.84826, [3, -0.173333, 0.00221594], [3, 0.12, -0.00153411]], [0.846726, [3, -0.12, 0.00153411], [3, 0.253333, -0.00323869]], [0.825251, [3, -0.253333, 0], [3, 0.24, 0]], [0.825251, [3, -0.24, 0], [3, 0.293333, 0]], [0.812978, [3, -0.293333, 0.0122732], [3, 0.226667, -0.00948382]], [0.0398422, [3, -0.226667, 0], [3, 0.2, 0]], [0.131882, [3, -0.2, 0], [3, 0, 0]]])


            try:
              # uncomment the following line and modify the IP if you use this script outside Choregraphe.
              # motion = ALProxy("ALMotion", IP, 9559)
              # motion = ALProxy("ALMotion")
              naos.motion.post.angleInterpolationBezier(names, times, keys)
            except BaseException, err:
              print err

        else:
            print("Doing nothing..")
            for nao in naos:
                x = 0
                theta = 0
                nao.motion.setWalkTargetVelocity(x, y, theta, frequency)
            time.sleep(CommandFreq) # sleep after every command


    # Do a simply interpolation
    #target1 = math.radians(119.5)
    #target2 = math.radians(29.5)
    #naos.motion.post.angleInterpolation(['HeadYaw', 'HeadPitch'],
    #        [[target1, -target1, 0.0], [target2, -target2, 0.0]],
    #        [[1.0, 5.0, 7.0], [1.0, 5.0, 7.0]], True)
    #naos.behavior.post.runBehavior('kecup')
    #naos.behavior.post.runBehavior('vangelis')

    # for nao in naos:
    #     nao.behavior.post.runBehavior('vangelis')


    # Wait
    #while time.time() < (starttime+10.0):
    #    time.sleep(0.1)

    # Stop logging if needed
    #naos.stop()

if __name__ == '__main__':
    # Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--nao', action='append')
    args = parser.parse_args()

    if not args.nao:
        print('No naos to test specified!')
        sys.exit(0)

    main(args)
